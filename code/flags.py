import tensorflow as tf

flags = tf.app.flags
FLAGS = flags.FLAGS

flags.DEFINE_string("f","","fake")
flags.DEFINE_boolean("print_tensors", False, "Should tensor be printed")
flags.DEFINE_string("print_tensors_filter", "", "Comma delimited tensor names to print")
flags.DEFINE_integer("print_tensors_summarize", 1000000, "Length of printed tensor")
flags.DEFINE_integer("max_num_epochs", -1, "maximum num epochs")
flags.DEFINE_string("data_set", "","name of the data set to use")
flags.DEFINE_string("model", "","name of the model")
flags.DEFINE_boolean("plot", False, "should plot during training")
flags.DEFINE_integer("num_parallel_experiments", 4, "Number of parallel experiments")
flags.DEFINE_integer("num_workers", 4,"number workers")
flags.DEFINE_integer("num_samples", 50, "number samples when looking for the best hyperparameters")
flags.DEFINE_integer("num_samples_best_eval", 0, "number samples when assessing    the best model")
flags.DEFINE_boolean("debug_tb", False, "enable tensorboard debug")
flags.DEFINE_boolean("debug_cli", False, "enable command line debug")
flags.DEFINE_string("args", "","args for the experiment in case of debug run")
flags.DEFINE_string("models","rnade_laplace,rnade_normal,rnade_deepnormal,rnade_deeplaplace,nn_pdf_const_cov,nn_pdf_param_cov,nn_pdf_ar,nn_pdf_m,mdn_const_cov,mdn_param_cov", "all models to run experiments for")
flags.DEFINE_string("data_sets","sin,sin_t_noise,inv_sin,inv_sin_t_noise,uci_redwine,uci_redwine_joint,uci_whitewine,uci_parkinsons,mpg,uci_whitewine_joint,uci_parkinsons_joint,etf,etf2d,fx_all_predicted,fx_eurgbp_predicted,fx_eur_predicted", "all data sets to run experiments for")
flags.DEFINE_boolean("debug_grad", False, "enable gradient debugging")
flags.DEFINE_boolean("summary", False, "enable logging summaries")
flags.DEFINE_string("summary_filter", "", "Comma delimited names of summaries")
flags.DEFINE_string("dir", "results", "target dir for experiments")
flags.DEFINE_boolean("check_nans", False, "enable nan checking")
flags.DEFINE_integer("save_summary_steps", 500, "How often to write summaries")
flags.DEFINE_integer("save_checkpoints_steps", 1000, "How often to save checkpoints")
flags.DEFINE_integer("eval_throttle_secs", 5, "Period of eval runs")
flags.DEFINE_integer("max_steps_without_decrease", 500, "Early stopping")
flags.DEFINE_string("data_sample_random_seeds", "", "Seeds for data splits")
flags.DEFINE_string("per_process_gpu_memory_fraction", "0.035","fraction of GPU memory allocated per process")
flags.DEFINE_string("downloaded_data", "/home/pawel/PycharmProjects/data/","downloaded data")